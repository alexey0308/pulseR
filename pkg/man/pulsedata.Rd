% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pulseData.R
\name{PulseData}
\alias{PulseData}
\alias{findDeseqFactorsSingle}
\alias{normaliseWithSpikeIns}
\alias{normaliseNoSpikeins}
\alias{findDeseqFactorsForFractions}
\alias{addKnownToFormulas}
\alias{makeGroups}
\alias{generateTestDataFrom}
\alias{multiplyList}
\alias{shrinkList}
\title{Create an object for pulse-change count data}
\usage{
PulseData(counts, conditions, formulas, formulaIndexes = NULL,
  spikeins = NULL, groups = NULL)

findDeseqFactorsSingle(count_data)

normaliseWithSpikeIns(pd, refGroup, spikeLists)

normaliseNoSpikeins(pd, groups)

findDeseqFactorsForFractions(count_data, conditions)

addKnownToFormulas(formulas, formulaIndexes, conditions)

makeGroups(pd, normGroups)

generateTestDataFrom(formulas, formulaIndexes, normFactors, par, conditions)

multiplyList(source, pattern)

shrinkList(list)
}
\arguments{
\item{counts}{a matrix; column names correspond to sample names.
The columns in \code{counts} correspond to the rows in \code{conditions} argument.}

\item{conditions}{a data.frame;
the first column corresponds to the conditions given in \code{formulas}.
The order of rows corresponds to the columns (samples) in the
\code{counts} argument.}

\item{formulas}{a list, created by \code{\link{MeanFormulas}}}

\item{formulaIndexes}{a list of lists; defines indexes of formulas
used for calculation of the expected read number}

\item{spikeins}{NULL (default) or a list of two items:
\itemize{
\item refGroup, a character, which defines the group which should be
treated as a reference for normalisation
\item spikeLists, a list of character vectors with the spike-ins names and
the same structure as \code{formulaIndexes}.
}}

\item{groups}{NULL (default) or a formula or a vector,
e.g. ~ condition + time (if spike-ins are not provided).
The vector length must be the same as the sample number.
the names used in the \code{fractions} defines different fractions,
which should have distinct coefficients for mean expression fitting.}

\item{count_data}{a matrix; columns correspond to samples.}

\item{pd}{a \code{\link{PulseData}} object}

\item{refGroup}{a character name of a sample groups to use as a reference.
The name must be present in the spikeLists names list}

\item{spikeLists}{a named list with the same structure as formulaIndexes}

\item{normGroups}{a vector defining a rule for splitting the samples in \code{pd}}

\item{normFactors}{list of vectors; normalisation factors, if
known}

\item{par}{a list of named parameters; gene-specific parameters
are vectors}

\item{source}{a named lists with the values to multiply}

\item{pattern}{a vector of names defining how to construct a new
list (typically, a longer one with replicates).}

\item{list}{a list to process}

\item{pd}{a \code{\link{PulseData}} object}

\item{groups}{a vector for splitting objects to groups}

\item{count_data}{integer matrix, colnames correspond to samples
(rownames in \code{conditions})}

\item{conditions}{factors to split samples for normalisation}

\item{formulas}{a named list with unevaluated expressions
for expression levels
(e.g. describing amounts of "labelled", "total" etc. RNA)}

\item{formulaIndexes}{a list describing which formulas to use for
mean read number calculation for fractions defined by the names of list items}

\item{conditions}{a data.frame with the first column corresponding to
names in formulasIndexes (e.g. "total", "pull_down")}

\item{pd}{a \code{\link{PulseData}} object}

\item{formulas}{a list}

\item{formulaIndexes}{list of lists; defines indexes of formulas
used for calculation of the expected read number}

\item{conditions}{a condition data.frame}
}
\value{
an object of class "PulseData"

a vector of doubles with normalisation factors ordered as columns in
the \code{count_data}

a list of lists of the normalisation coefficients for every sample

a vector with the coefficient for every sample

vector of double; normalisation factors in the same order as
columns in the \code{count_data}

a list with two items:
\itemize{
\item list of partially evaluated formulas
\item a vector of conditions generated from combination of columns
}

a named list with items "normCoeffs" and "normCoeffIndexes".
normCoeffs is the list to store the values of the normalisation coefficients
for every group.
normCoeffIndexes stores indexes of coefficients from unlist(normCoeffs)
sample-wise, i.e. length(normCoeffIndexes) is the number of samples.

matrix of counts with the order of columns as in conditions

a list

a shorter list
}
\description{
Create an object for pulse-change count data

Calculate normalisation factors for columns in a matrix

Estimate DESeq normalisation factors using spike-ins counts

Performs sequencing depth normalisation using the DESeq procedure.

Calculate normalisation factors

If, for example, a labelled fraction is estimated at several time points
(0hr, 2hr, 4hr), corresponding partially evaluated formulas will be
created. In this case, a time variable (e.g. "t") will be substituted by
its values from the corresponding column in the conditions data.frame.
Hence several partially evaluated formulas will be created for every
combination of variable values described in the conditions data.frame.

It is assumed that all samples in a group belong to the same condition,
i.e. the same equations are used to estimate expression levels.
However, they may correspond to different time points etc.

Create a test count data

A helper to generate named lists

If the same name is used for several items (e.g. "total"),
only first item is left in the result.
}
\details{
The \code{conditions} argument may include additional  columns, which
provide values for known parameters, such as time. Their name must be the
same as defined in formulas. For example, if a formula is defined as
\code{mu * exp(-d * time)} where \code{time} is the time point of the experiment,
the condition data.frame must contain a column named \code{time}.

The returned normalisation coefficients are assign to 1.
}
\examples{

# Spike-ins definition for object creation
 
formulaIndexes <- list(
  total_fraction = 'total',
  flow_through   = c('unlabelled', 'labelled'),
  pull_down      = c('labelled', 'unlabelled'))
  
# spike-ins set up:

refGroup <- "total_fraction"

labelled <- c("spike1", "spike2") 
unlabelled <- c("spike3", "spike4") 

spikeLists <- list(
#  total samples are normalised using all spike-ins
  total_fraction = list(c(unlabelled, labelled)),
# for every item in formulaIndexes we have a set of spike-ins:   
  flow_through   = list(unlabelled, labelled),
  pull_down      = list(labelled, unlabelled))
  
# argument for the function: 
spikeins <- list(refGroup = refGroup,
                 spikeLists = spikeLists)


formulas <- MeanFormulas(total = m, label = m * exp(-d*t))
formulaIndexes <- list(
  total = 'total',
  pull_down = 'label'
)
conditions <- data.frame(
  type = c('total', 'pull_down', 'pull_down'),
  t = c(0, 1, 5)
)
result <- addKnownToFormulas(formulas, formulaIndexes, conditions)
str(result)
# List of 2
# $ formulas      :List of 3
# ..$ total.0: symbol m
# ..$ label.1: language m * exp(-d * 1)
# ..$ label.5: language m * exp(-d * 5)
# $ formulaIndexes:List of 3
# ..$ total.0    : int 1
# ..$ pull_down.1: int 2
# ..$ pull_down.5: int 3

source <- list(
  total   = 1,
  label   = c(2,3),
  unlabel = c(4,5))
pattern <- c("total", "total", "label", "total", "unlabel")
multiplyList(source, pattern)
# $total
# [1] 1
# 
# $total
# [1] 1
# 
# $label
# [1] 2 3
# 
# $total
# [1] 1
# 
# $unlabel
# [1] 4 5
l <- list(
  total   = 1,
  total   = 1,
  unlabel = c(4,5))
shrinkList(l)
# $total
# [1] 1
# 
# $unlabel
# [1] 4 5

}
\keyword{internal}
