% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pulseData.R
\name{PulseData}
\alias{PulseData}
\title{Create an object for pulse-change count data}
\usage{
PulseData(counts, conditions, formulas, formulaIndexes = NULL,
  spikeins = NULL, groups = NULL)
}
\arguments{
\item{counts}{a matrix; column names correspond to sample names.
The columns in \code{counts} correspond to the rows in \code{conditions} argument.}

\item{conditions}{a data.frame;
the first column corresponds to the conditions given in \code{formulas}.
The order of rows corresponds to the columns (samples) in the
\code{counts} argument.}

\item{formulas}{a list, created by \code{\link{MeanFormulas}}}

\item{formulaIndexes}{a list of lists; defines indexes of formulas
used for calculation of the expected read number}

\item{spikeins}{NULL (default) or a list of two items:
\itemize{
\item refGroups, a character, which defines the group which should be
treated as a reference for normalisation
\item spikeLists, a list of character vectors with the spike-ins names and
the same structure as \code{formulaIndexes}.
}}

\item{groups}{NULL (default) or a formula or a vector,
e.g. ~ condition + time (if spike-ins are not provided).
The vector length must be the same as the sample number.
the names used in the \code{fractions} defines different fractions,
which should have distinct coefficients for mean expression fitting.}
}
\value{
an object of class "PulseData"
}
\description{
Create an object for pulse-change count data
}
\details{
The \code{conditions} argument may include additional  columns, which
provide values for known parameters, such as time. Their name must be the
same as defined in formulas. For example, if a formula is defined as
\code{mu * exp(-d * time)} where \code{time} is the time point of the experiment,
the condition data.frame must contain a column named \code{time}.
}
\examples{

# Spike-ins definition for object creation
 
formulaIndexes <- list(
  total_fraction = 'total',
  flow_through   = c('unlabelled', 'labelled'),
  pull_down      = c('labelled', 'unlabelled'))
  
# spike-ins set up:

refGroup <- "total_fraction"

labelled <- c("spike1", "spike2") 
unlabelled <- c("spike3", "spike4") 

spikeLists <- list(
#  total samples are normalised using all spike-ins
  total_fraction = list(c(unlabelled, labelled)),
# for every item in formulaIndexes we have a set of spike-ins:   
  flow_through   = list(unlabelled, labelled),
  pull_down      = list(labelled, unlabelled))
  
# argument for the function: 
spikeins <- list(refGroup = refGroup,
                 spikeLists = spikeLists)

}
