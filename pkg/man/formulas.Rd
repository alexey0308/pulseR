% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/formulas.R
\name{MeanFormulas}
\alias{MeanFormulas}
\alias{contaminate}
\alias{constructFormulas}
\alias{amount}
\alias{amount_}
\alias{degrade}
\alias{degrade_}
\alias{grow}
\alias{growFrom0}
\alias{grow_}
\title{Create list of formulas for expected read numbers}
\usage{
MeanFormulas(...)

contaminate(formulas, target_condition, contaminant_condition, coef_name)

constructFormulas(formulas, conditions)

amount(x)

amount_(x)

degrade(x, d, t)

degrade_(x, d, t)

grow(x, mu, d, t)

growFrom0(mu, d, t)

grow_(x, mu, d, t)
}
\arguments{
\item{...}{list of named arguments; names represent condition labels,
the arguments values are unquoted expressions, which define formulas
for estimation of mean read number.}

\item{formulas}{list, generated by \code{\link{MeanFormulas}}}

\item{target_condition}{character; a condition,
for which a new formulas is to be generated}

\item{contaminant_condition}{character; a condition, which reads can contaminate
fraction corresponding to \code{target_condition}}

\item{coef_name}{character; the name of the cross-contamination rate}

\item{conditions}{a data.frame; the first column corresponds to
to \code{names(formulas)}, conditions given by the formulas.
Other columns, if exist, contain parameter values, which are sample specific.
The order of rows corresponds to the order of samples.}

\item{x}{a character or a language object (an expression, a call
or a name)}

\item{d}{a degradation rate.}

\item{t}{a longitude of the modelled period.}

\item{mu}{new steady-state level.}

\item{formulas}{list, generated by \code{\link{MeanFormulas}}}

\item{x}{an expression level}

\item{x}{initial concentration.}

\item{x}{initial concentration.}

\item{d}{a degradation rate.}

\item{t}{a longitude of the modelled period.}
}
\value{
list with keys corresponding to condition names and values as
unevaluated call objects

unevaluated call, as from \code{\link{quote}} function

list; formulas with substituted parameters according to the values
in the \code{conditions} data.frame

an expression for the initial RNA level

an expression for the initial RNA level

an expression for the calculation of the RNA level after
degradation during time \verb{t}.

an expression for the calculation of the RNA level after
degradation during time \verb{t}.

an expression for the calculation of the RNA level after time
\verb{t}.

an expression to calculate the RNA level.

an expression for the calculation of the RNA level.
}
\description{
Create list of formulas for expected read numbers

If the condition A can be contaminated with reads from the condition B,
its expected mean read number will be \eqn{(1-p)r_a + p r_b}, where
\eqn{p} is cross-contamination rate and \eqn{r_a,r_b} are
expected mean read numbers for conditions A and B, correspondingly.

Evaluate formulas according to parameters, given in
the condition \code{data.frame}

Create a formula object for the initial RNA level.

A non-standard evaluation version of the \code{\link{amount}}
function.

All the arguments must be characters or language objects
(expression, call or name).

Implements a non-standard evaluation version.

All the arguments must be characters or language objects
(expression, call or name).

All the arguments must be characters or language objects
(expression, call or name).

This implements the non-standard evaluation version of the
\code{\link{grow}} function.
}
\examples{
\dontrun{
formulas <- MeanFormulas(total=mu, labelled=mu*d, unlabelled=mu*(1-d))
}
\dontrun{
forms <- MeanFormulas(A=r_a, B=r_b)
forms[["A"]] <- contaminate(forms, "A", "B", "p")
}
x <- amount("mu")
degrade_(x, d_rate, time)
# mu_0 * exp(-d_rate * time)
x <- amount("mu_0")
mu <- amount_(mu_new)
d <- "degradation_rate"
t <- "t_labelling"
degrade(x, d, t)
# mu_0 * exp(-degradation_rate * t_labelling)

x <- amount("a")
degrade_(x,b,c)
# a * exp(-b * c)

x <- amount_(mu_0)
mu <- amount("mu_new")
d <- "degradation_rate"
t <- "t_labelling"
grow(x, mu, d, t)
# mu_new - (mu_new - mu_0) * exp(-degradation_rate * t_labelling)
growFrom0("b","c","d")
# b - b * exp(-c * d)

x <- amount("a")
grow_(x,b,c,d)
# b - (b - a) * exp(-c * d)

}
